// source: gateway.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.gateway.Analysis', null, global);
goog.exportSymbol('proto.gateway.AspectData', null, global);
goog.exportSymbol('proto.gateway.AspectInfo', null, global);
goog.exportSymbol('proto.gateway.AspectType', null, global);
goog.exportSymbol('proto.gateway.Cusp', null, global);
goog.exportSymbol('proto.gateway.CuspData', null, global);
goog.exportSymbol('proto.gateway.GetHoroscopeAnalysisRequest', null, global);
goog.exportSymbol('proto.gateway.GetHoroscopeAnalysisResponse', null, global);
goog.exportSymbol('proto.gateway.Horoscope', null, global);
goog.exportSymbol('proto.gateway.HoroscopeData', null, global);
goog.exportSymbol('proto.gateway.Houses', null, global);
goog.exportSymbol('proto.gateway.Planet', null, global);
goog.exportSymbol('proto.gateway.PlanetData', null, global);
goog.exportSymbol('proto.gateway.PlanetInfo', null, global);
goog.exportSymbol('proto.gateway.Sign', null, global);
goog.exportSymbol('proto.gateway.TransitData', null, global);
goog.exportSymbol('proto.gateway.TransitInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.GetHoroscopeAnalysisRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.GetHoroscopeAnalysisRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.GetHoroscopeAnalysisRequest.displayName = 'proto.gateway.GetHoroscopeAnalysisRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.GetHoroscopeAnalysisResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.GetHoroscopeAnalysisResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.GetHoroscopeAnalysisResponse.displayName = 'proto.gateway.GetHoroscopeAnalysisResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.Analysis = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.Analysis, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.Analysis.displayName = 'proto.gateway.Analysis';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.HoroscopeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gateway.HoroscopeData.repeatedFields_, null);
};
goog.inherits(proto.gateway.HoroscopeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.HoroscopeData.displayName = 'proto.gateway.HoroscopeData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.Planet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.Planet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.Planet.displayName = 'proto.gateway.Planet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.Houses = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gateway.Houses.repeatedFields_, null);
};
goog.inherits(proto.gateway.Houses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.Houses.displayName = 'proto.gateway.Houses';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.Sign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.Sign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.Sign.displayName = 'proto.gateway.Sign';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.Cusp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gateway.Cusp.repeatedFields_, null);
};
goog.inherits(proto.gateway.Cusp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.Cusp.displayName = 'proto.gateway.Cusp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.CuspData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.CuspData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.CuspData.displayName = 'proto.gateway.CuspData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.PlanetInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gateway.PlanetInfo.repeatedFields_, null);
};
goog.inherits(proto.gateway.PlanetInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.PlanetInfo.displayName = 'proto.gateway.PlanetInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.PlanetData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.PlanetData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.PlanetData.displayName = 'proto.gateway.PlanetData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.AspectInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gateway.AspectInfo.repeatedFields_, null);
};
goog.inherits(proto.gateway.AspectInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.AspectInfo.displayName = 'proto.gateway.AspectInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.AspectData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.AspectData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.AspectData.displayName = 'proto.gateway.AspectData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.TransitInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gateway.TransitInfo.repeatedFields_, null);
};
goog.inherits(proto.gateway.TransitInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.TransitInfo.displayName = 'proto.gateway.TransitInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.TransitData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.TransitData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.TransitData.displayName = 'proto.gateway.TransitData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.Horoscope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.Horoscope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gateway.Horoscope.displayName = 'proto.gateway.Horoscope';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.GetHoroscopeAnalysisRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.GetHoroscopeAnalysisRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.GetHoroscopeAnalysisRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GetHoroscopeAnalysisRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
date: jspb.Message.getFieldWithDefault(msg, 1, ""),
time: jspb.Message.getFieldWithDefault(msg, 2, ""),
lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
lon: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.GetHoroscopeAnalysisRequest}
 */
proto.gateway.GetHoroscopeAnalysisRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.GetHoroscopeAnalysisRequest;
  return proto.gateway.GetHoroscopeAnalysisRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.GetHoroscopeAnalysisRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.GetHoroscopeAnalysisRequest}
 */
proto.gateway.GetHoroscopeAnalysisRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.GetHoroscopeAnalysisRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.GetHoroscopeAnalysisRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.GetHoroscopeAnalysisRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GetHoroscopeAnalysisRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getLon();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional string date = 1;
 * @return {string}
 */
proto.gateway.GetHoroscopeAnalysisRequest.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GetHoroscopeAnalysisRequest} returns this
 */
proto.gateway.GetHoroscopeAnalysisRequest.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string time = 2;
 * @return {string}
 */
proto.gateway.GetHoroscopeAnalysisRequest.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.GetHoroscopeAnalysisRequest} returns this
 */
proto.gateway.GetHoroscopeAnalysisRequest.prototype.setTime = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double lat = 3;
 * @return {number}
 */
proto.gateway.GetHoroscopeAnalysisRequest.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GetHoroscopeAnalysisRequest} returns this
 */
proto.gateway.GetHoroscopeAnalysisRequest.prototype.setLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double lon = 4;
 * @return {number}
 */
proto.gateway.GetHoroscopeAnalysisRequest.prototype.getLon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.GetHoroscopeAnalysisRequest} returns this
 */
proto.gateway.GetHoroscopeAnalysisRequest.prototype.setLon = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.GetHoroscopeAnalysisResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.GetHoroscopeAnalysisResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.GetHoroscopeAnalysisResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GetHoroscopeAnalysisResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
analysis: (f = msg.getAnalysis()) && proto.gateway.Analysis.toObject(includeInstance, f),
data: (f = msg.getData()) && proto.gateway.HoroscopeData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.GetHoroscopeAnalysisResponse}
 */
proto.gateway.GetHoroscopeAnalysisResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.GetHoroscopeAnalysisResponse;
  return proto.gateway.GetHoroscopeAnalysisResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.GetHoroscopeAnalysisResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.GetHoroscopeAnalysisResponse}
 */
proto.gateway.GetHoroscopeAnalysisResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gateway.Analysis;
      reader.readMessage(value,proto.gateway.Analysis.deserializeBinaryFromReader);
      msg.setAnalysis(value);
      break;
    case 2:
      var value = new proto.gateway.HoroscopeData;
      reader.readMessage(value,proto.gateway.HoroscopeData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.GetHoroscopeAnalysisResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.GetHoroscopeAnalysisResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.GetHoroscopeAnalysisResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.GetHoroscopeAnalysisResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnalysis();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gateway.Analysis.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gateway.HoroscopeData.serializeBinaryToWriter
    );
  }
};


/**
 * optional Analysis analysis = 1;
 * @return {?proto.gateway.Analysis}
 */
proto.gateway.GetHoroscopeAnalysisResponse.prototype.getAnalysis = function() {
  return /** @type{?proto.gateway.Analysis} */ (
    jspb.Message.getWrapperField(this, proto.gateway.Analysis, 1));
};


/**
 * @param {?proto.gateway.Analysis|undefined} value
 * @return {!proto.gateway.GetHoroscopeAnalysisResponse} returns this
*/
proto.gateway.GetHoroscopeAnalysisResponse.prototype.setAnalysis = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.GetHoroscopeAnalysisResponse} returns this
 */
proto.gateway.GetHoroscopeAnalysisResponse.prototype.clearAnalysis = function() {
  return this.setAnalysis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.GetHoroscopeAnalysisResponse.prototype.hasAnalysis = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HoroscopeData data = 2;
 * @return {?proto.gateway.HoroscopeData}
 */
proto.gateway.GetHoroscopeAnalysisResponse.prototype.getData = function() {
  return /** @type{?proto.gateway.HoroscopeData} */ (
    jspb.Message.getWrapperField(this, proto.gateway.HoroscopeData, 2));
};


/**
 * @param {?proto.gateway.HoroscopeData|undefined} value
 * @return {!proto.gateway.GetHoroscopeAnalysisResponse} returns this
*/
proto.gateway.GetHoroscopeAnalysisResponse.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.GetHoroscopeAnalysisResponse} returns this
 */
proto.gateway.GetHoroscopeAnalysisResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.GetHoroscopeAnalysisResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.Analysis.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.Analysis.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.Analysis} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.Analysis.toObject = function(includeInstance, msg) {
  var f, obj = {
cusp: (f = msg.getCusp()) && proto.gateway.Cusp.toObject(includeInstance, f),
planet: (f = msg.getPlanet()) && proto.gateway.PlanetInfo.toObject(includeInstance, f),
aspect: (f = msg.getAspect()) && proto.gateway.AspectInfo.toObject(includeInstance, f),
transit: (f = msg.getTransit()) && proto.gateway.TransitInfo.toObject(includeInstance, f),
ascendant: jspb.Message.getFieldWithDefault(msg, 5, ""),
horoscope: (f = msg.getHoroscope()) && proto.gateway.Horoscope.toObject(includeInstance, f),
summary: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.Analysis}
 */
proto.gateway.Analysis.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.Analysis;
  return proto.gateway.Analysis.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.Analysis} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.Analysis}
 */
proto.gateway.Analysis.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gateway.Cusp;
      reader.readMessage(value,proto.gateway.Cusp.deserializeBinaryFromReader);
      msg.setCusp(value);
      break;
    case 2:
      var value = new proto.gateway.PlanetInfo;
      reader.readMessage(value,proto.gateway.PlanetInfo.deserializeBinaryFromReader);
      msg.setPlanet(value);
      break;
    case 3:
      var value = new proto.gateway.AspectInfo;
      reader.readMessage(value,proto.gateway.AspectInfo.deserializeBinaryFromReader);
      msg.setAspect(value);
      break;
    case 4:
      var value = new proto.gateway.TransitInfo;
      reader.readMessage(value,proto.gateway.TransitInfo.deserializeBinaryFromReader);
      msg.setTransit(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAscendant(value);
      break;
    case 6:
      var value = new proto.gateway.Horoscope;
      reader.readMessage(value,proto.gateway.Horoscope.deserializeBinaryFromReader);
      msg.setHoroscope(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSummary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.Analysis.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.Analysis.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.Analysis} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.Analysis.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCusp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gateway.Cusp.serializeBinaryToWriter
    );
  }
  f = message.getPlanet();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gateway.PlanetInfo.serializeBinaryToWriter
    );
  }
  f = message.getAspect();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.gateway.AspectInfo.serializeBinaryToWriter
    );
  }
  f = message.getTransit();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.gateway.TransitInfo.serializeBinaryToWriter
    );
  }
  f = message.getAscendant();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getHoroscope();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.gateway.Horoscope.serializeBinaryToWriter
    );
  }
  f = message.getSummary();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional Cusp cusp = 1;
 * @return {?proto.gateway.Cusp}
 */
proto.gateway.Analysis.prototype.getCusp = function() {
  return /** @type{?proto.gateway.Cusp} */ (
    jspb.Message.getWrapperField(this, proto.gateway.Cusp, 1));
};


/**
 * @param {?proto.gateway.Cusp|undefined} value
 * @return {!proto.gateway.Analysis} returns this
*/
proto.gateway.Analysis.prototype.setCusp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.Analysis} returns this
 */
proto.gateway.Analysis.prototype.clearCusp = function() {
  return this.setCusp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.Analysis.prototype.hasCusp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PlanetInfo planet = 2;
 * @return {?proto.gateway.PlanetInfo}
 */
proto.gateway.Analysis.prototype.getPlanet = function() {
  return /** @type{?proto.gateway.PlanetInfo} */ (
    jspb.Message.getWrapperField(this, proto.gateway.PlanetInfo, 2));
};


/**
 * @param {?proto.gateway.PlanetInfo|undefined} value
 * @return {!proto.gateway.Analysis} returns this
*/
proto.gateway.Analysis.prototype.setPlanet = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.Analysis} returns this
 */
proto.gateway.Analysis.prototype.clearPlanet = function() {
  return this.setPlanet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.Analysis.prototype.hasPlanet = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AspectInfo aspect = 3;
 * @return {?proto.gateway.AspectInfo}
 */
proto.gateway.Analysis.prototype.getAspect = function() {
  return /** @type{?proto.gateway.AspectInfo} */ (
    jspb.Message.getWrapperField(this, proto.gateway.AspectInfo, 3));
};


/**
 * @param {?proto.gateway.AspectInfo|undefined} value
 * @return {!proto.gateway.Analysis} returns this
*/
proto.gateway.Analysis.prototype.setAspect = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.Analysis} returns this
 */
proto.gateway.Analysis.prototype.clearAspect = function() {
  return this.setAspect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.Analysis.prototype.hasAspect = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TransitInfo transit = 4;
 * @return {?proto.gateway.TransitInfo}
 */
proto.gateway.Analysis.prototype.getTransit = function() {
  return /** @type{?proto.gateway.TransitInfo} */ (
    jspb.Message.getWrapperField(this, proto.gateway.TransitInfo, 4));
};


/**
 * @param {?proto.gateway.TransitInfo|undefined} value
 * @return {!proto.gateway.Analysis} returns this
*/
proto.gateway.Analysis.prototype.setTransit = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.Analysis} returns this
 */
proto.gateway.Analysis.prototype.clearTransit = function() {
  return this.setTransit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.Analysis.prototype.hasTransit = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string ascendant = 5;
 * @return {string}
 */
proto.gateway.Analysis.prototype.getAscendant = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.Analysis} returns this
 */
proto.gateway.Analysis.prototype.setAscendant = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Horoscope horoscope = 6;
 * @return {?proto.gateway.Horoscope}
 */
proto.gateway.Analysis.prototype.getHoroscope = function() {
  return /** @type{?proto.gateway.Horoscope} */ (
    jspb.Message.getWrapperField(this, proto.gateway.Horoscope, 6));
};


/**
 * @param {?proto.gateway.Horoscope|undefined} value
 * @return {!proto.gateway.Analysis} returns this
*/
proto.gateway.Analysis.prototype.setHoroscope = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.Analysis} returns this
 */
proto.gateway.Analysis.prototype.clearHoroscope = function() {
  return this.setHoroscope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.Analysis.prototype.hasHoroscope = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string summary = 7;
 * @return {string}
 */
proto.gateway.Analysis.prototype.getSummary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.Analysis} returns this
 */
proto.gateway.Analysis.prototype.setSummary = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gateway.HoroscopeData.repeatedFields_ = [1,2,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.HoroscopeData.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.HoroscopeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.HoroscopeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.HoroscopeData.toObject = function(includeInstance, msg) {
  var f, obj = {
planetsList: jspb.Message.toObjectList(msg.getPlanetsList(),
    proto.gateway.Planet.toObject, includeInstance),
currentPlanetsList: jspb.Message.toObjectList(msg.getCurrentPlanetsList(),
    proto.gateway.Planet.toObject, includeInstance),
houses: (f = msg.getHouses()) && proto.gateway.Houses.toObject(includeInstance, f),
currentHouses: (f = msg.getCurrentHouses()) && proto.gateway.Houses.toObject(includeInstance, f),
signsList: jspb.Message.toObjectList(msg.getSignsList(),
    proto.gateway.Sign.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.HoroscopeData}
 */
proto.gateway.HoroscopeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.HoroscopeData;
  return proto.gateway.HoroscopeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.HoroscopeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.HoroscopeData}
 */
proto.gateway.HoroscopeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gateway.Planet;
      reader.readMessage(value,proto.gateway.Planet.deserializeBinaryFromReader);
      msg.addPlanets(value);
      break;
    case 2:
      var value = new proto.gateway.Planet;
      reader.readMessage(value,proto.gateway.Planet.deserializeBinaryFromReader);
      msg.addCurrentPlanets(value);
      break;
    case 3:
      var value = new proto.gateway.Houses;
      reader.readMessage(value,proto.gateway.Houses.deserializeBinaryFromReader);
      msg.setHouses(value);
      break;
    case 4:
      var value = new proto.gateway.Houses;
      reader.readMessage(value,proto.gateway.Houses.deserializeBinaryFromReader);
      msg.setCurrentHouses(value);
      break;
    case 5:
      var value = new proto.gateway.Sign;
      reader.readMessage(value,proto.gateway.Sign.deserializeBinaryFromReader);
      msg.addSigns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.HoroscopeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.HoroscopeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.HoroscopeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.HoroscopeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlanetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.gateway.Planet.serializeBinaryToWriter
    );
  }
  f = message.getCurrentPlanetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.gateway.Planet.serializeBinaryToWriter
    );
  }
  f = message.getHouses();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.gateway.Houses.serializeBinaryToWriter
    );
  }
  f = message.getCurrentHouses();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.gateway.Houses.serializeBinaryToWriter
    );
  }
  f = message.getSignsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.gateway.Sign.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Planet planets = 1;
 * @return {!Array<!proto.gateway.Planet>}
 */
proto.gateway.HoroscopeData.prototype.getPlanetsList = function() {
  return /** @type{!Array<!proto.gateway.Planet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gateway.Planet, 1));
};


/**
 * @param {!Array<!proto.gateway.Planet>} value
 * @return {!proto.gateway.HoroscopeData} returns this
*/
proto.gateway.HoroscopeData.prototype.setPlanetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.gateway.Planet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gateway.Planet}
 */
proto.gateway.HoroscopeData.prototype.addPlanets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.gateway.Planet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.HoroscopeData} returns this
 */
proto.gateway.HoroscopeData.prototype.clearPlanetsList = function() {
  return this.setPlanetsList([]);
};


/**
 * repeated Planet current_planets = 2;
 * @return {!Array<!proto.gateway.Planet>}
 */
proto.gateway.HoroscopeData.prototype.getCurrentPlanetsList = function() {
  return /** @type{!Array<!proto.gateway.Planet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gateway.Planet, 2));
};


/**
 * @param {!Array<!proto.gateway.Planet>} value
 * @return {!proto.gateway.HoroscopeData} returns this
*/
proto.gateway.HoroscopeData.prototype.setCurrentPlanetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.gateway.Planet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gateway.Planet}
 */
proto.gateway.HoroscopeData.prototype.addCurrentPlanets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.gateway.Planet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.HoroscopeData} returns this
 */
proto.gateway.HoroscopeData.prototype.clearCurrentPlanetsList = function() {
  return this.setCurrentPlanetsList([]);
};


/**
 * optional Houses houses = 3;
 * @return {?proto.gateway.Houses}
 */
proto.gateway.HoroscopeData.prototype.getHouses = function() {
  return /** @type{?proto.gateway.Houses} */ (
    jspb.Message.getWrapperField(this, proto.gateway.Houses, 3));
};


/**
 * @param {?proto.gateway.Houses|undefined} value
 * @return {!proto.gateway.HoroscopeData} returns this
*/
proto.gateway.HoroscopeData.prototype.setHouses = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.HoroscopeData} returns this
 */
proto.gateway.HoroscopeData.prototype.clearHouses = function() {
  return this.setHouses(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.HoroscopeData.prototype.hasHouses = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Houses current_houses = 4;
 * @return {?proto.gateway.Houses}
 */
proto.gateway.HoroscopeData.prototype.getCurrentHouses = function() {
  return /** @type{?proto.gateway.Houses} */ (
    jspb.Message.getWrapperField(this, proto.gateway.Houses, 4));
};


/**
 * @param {?proto.gateway.Houses|undefined} value
 * @return {!proto.gateway.HoroscopeData} returns this
*/
proto.gateway.HoroscopeData.prototype.setCurrentHouses = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gateway.HoroscopeData} returns this
 */
proto.gateway.HoroscopeData.prototype.clearCurrentHouses = function() {
  return this.setCurrentHouses(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gateway.HoroscopeData.prototype.hasCurrentHouses = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Sign signs = 5;
 * @return {!Array<!proto.gateway.Sign>}
 */
proto.gateway.HoroscopeData.prototype.getSignsList = function() {
  return /** @type{!Array<!proto.gateway.Sign>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gateway.Sign, 5));
};


/**
 * @param {!Array<!proto.gateway.Sign>} value
 * @return {!proto.gateway.HoroscopeData} returns this
*/
proto.gateway.HoroscopeData.prototype.setSignsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.gateway.Sign=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gateway.Sign}
 */
proto.gateway.HoroscopeData.prototype.addSigns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.gateway.Sign, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.HoroscopeData} returns this
 */
proto.gateway.HoroscopeData.prototype.clearSignsList = function() {
  return this.setSignsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.Planet.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.Planet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.Planet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.Planet.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
longitude: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.Planet}
 */
proto.gateway.Planet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.Planet;
  return proto.gateway.Planet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.Planet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.Planet}
 */
proto.gateway.Planet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.Planet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.Planet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.Planet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.Planet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLongitude();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.gateway.Planet.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.Planet} returns this
 */
proto.gateway.Planet.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string longitude = 2;
 * @return {string}
 */
proto.gateway.Planet.prototype.getLongitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.Planet} returns this
 */
proto.gateway.Planet.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gateway.Houses.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.Houses.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.Houses.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.Houses} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.Houses.toObject = function(includeInstance, msg) {
  var f, obj = {
houseList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
ascendant: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
mc: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
armc: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
vertex: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
equatorialAscendant: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
kochCoAscendant: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
munkaseyCoAscendant: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
munkaseyPolarAscendant: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.Houses}
 */
proto.gateway.Houses.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.Houses;
  return proto.gateway.Houses.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.Houses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.Houses}
 */
proto.gateway.Houses.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addHouse(values[i]);
      }
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAscendant(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMc(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setArmc(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVertex(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEquatorialAscendant(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setKochCoAscendant(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMunkaseyCoAscendant(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMunkaseyPolarAscendant(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.Houses.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.Houses.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.Houses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.Houses.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHouseList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getAscendant();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMc();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getArmc();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getVertex();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getEquatorialAscendant();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getKochCoAscendant();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getMunkaseyCoAscendant();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getMunkaseyPolarAscendant();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
};


/**
 * repeated int32 house = 1;
 * @return {!Array<number>}
 */
proto.gateway.Houses.prototype.getHouseList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.gateway.Houses} returns this
 */
proto.gateway.Houses.prototype.setHouseList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.gateway.Houses} returns this
 */
proto.gateway.Houses.prototype.addHouse = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.Houses} returns this
 */
proto.gateway.Houses.prototype.clearHouseList = function() {
  return this.setHouseList([]);
};


/**
 * optional double ascendant = 2;
 * @return {number}
 */
proto.gateway.Houses.prototype.getAscendant = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.Houses} returns this
 */
proto.gateway.Houses.prototype.setAscendant = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double mc = 3;
 * @return {number}
 */
proto.gateway.Houses.prototype.getMc = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.Houses} returns this
 */
proto.gateway.Houses.prototype.setMc = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double armc = 4;
 * @return {number}
 */
proto.gateway.Houses.prototype.getArmc = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.Houses} returns this
 */
proto.gateway.Houses.prototype.setArmc = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double vertex = 5;
 * @return {number}
 */
proto.gateway.Houses.prototype.getVertex = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.Houses} returns this
 */
proto.gateway.Houses.prototype.setVertex = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double equatorial_ascendant = 6;
 * @return {number}
 */
proto.gateway.Houses.prototype.getEquatorialAscendant = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.Houses} returns this
 */
proto.gateway.Houses.prototype.setEquatorialAscendant = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double koch_co_ascendant = 7;
 * @return {number}
 */
proto.gateway.Houses.prototype.getKochCoAscendant = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.Houses} returns this
 */
proto.gateway.Houses.prototype.setKochCoAscendant = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double munkasey_co_ascendant = 8;
 * @return {number}
 */
proto.gateway.Houses.prototype.getMunkaseyCoAscendant = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.Houses} returns this
 */
proto.gateway.Houses.prototype.setMunkaseyCoAscendant = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double munkasey_polar_ascendant = 9;
 * @return {number}
 */
proto.gateway.Houses.prototype.getMunkaseyPolarAscendant = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.Houses} returns this
 */
proto.gateway.Houses.prototype.setMunkaseyPolarAscendant = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.Sign.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.Sign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.Sign} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.Sign.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
sign: jspb.Message.getFieldWithDefault(msg, 2, ""),
house: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.Sign}
 */
proto.gateway.Sign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.Sign;
  return proto.gateway.Sign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.Sign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.Sign}
 */
proto.gateway.Sign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSign(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHouse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.Sign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.Sign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.Sign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.Sign.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSign();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHouse();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.gateway.Sign.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.Sign} returns this
 */
proto.gateway.Sign.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sign = 2;
 * @return {string}
 */
proto.gateway.Sign.prototype.getSign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.Sign} returns this
 */
proto.gateway.Sign.prototype.setSign = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 house = 3;
 * @return {number}
 */
proto.gateway.Sign.prototype.getHouse = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.gateway.Sign} returns this
 */
proto.gateway.Sign.prototype.setHouse = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gateway.Cusp.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.Cusp.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.Cusp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.Cusp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.Cusp.toObject = function(includeInstance, msg) {
  var f, obj = {
headersList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.gateway.CuspData.toObject, includeInstance),
analysisList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.Cusp}
 */
proto.gateway.Cusp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.Cusp;
  return proto.gateway.Cusp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.Cusp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.Cusp}
 */
proto.gateway.Cusp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addHeaders(value);
      break;
    case 2:
      var value = new proto.gateway.CuspData;
      reader.readMessage(value,proto.gateway.CuspData.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAnalysis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.Cusp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.Cusp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.Cusp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.Cusp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.gateway.CuspData.serializeBinaryToWriter
    );
  }
  f = message.getAnalysisList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * repeated string headers = 1;
 * @return {!Array<string>}
 */
proto.gateway.Cusp.prototype.getHeadersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.gateway.Cusp} returns this
 */
proto.gateway.Cusp.prototype.setHeadersList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.gateway.Cusp} returns this
 */
proto.gateway.Cusp.prototype.addHeaders = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.Cusp} returns this
 */
proto.gateway.Cusp.prototype.clearHeadersList = function() {
  return this.setHeadersList([]);
};


/**
 * repeated CuspData data = 2;
 * @return {!Array<!proto.gateway.CuspData>}
 */
proto.gateway.Cusp.prototype.getDataList = function() {
  return /** @type{!Array<!proto.gateway.CuspData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gateway.CuspData, 2));
};


/**
 * @param {!Array<!proto.gateway.CuspData>} value
 * @return {!proto.gateway.Cusp} returns this
*/
proto.gateway.Cusp.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.gateway.CuspData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gateway.CuspData}
 */
proto.gateway.Cusp.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.gateway.CuspData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.Cusp} returns this
 */
proto.gateway.Cusp.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * repeated string analysis = 3;
 * @return {!Array<string>}
 */
proto.gateway.Cusp.prototype.getAnalysisList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.gateway.Cusp} returns this
 */
proto.gateway.Cusp.prototype.setAnalysisList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.gateway.Cusp} returns this
 */
proto.gateway.Cusp.prototype.addAnalysis = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.Cusp} returns this
 */
proto.gateway.Cusp.prototype.clearAnalysisList = function() {
  return this.setAnalysisList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.CuspData.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.CuspData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.CuspData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.CuspData.toObject = function(includeInstance, msg) {
  var f, obj = {
house: jspb.Message.getFieldWithDefault(msg, 1, ""),
startLongitude: jspb.Message.getFieldWithDefault(msg, 2, ""),
zodiacSign: jspb.Message.getFieldWithDefault(msg, 3, ""),
degrees: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.CuspData}
 */
proto.gateway.CuspData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.CuspData;
  return proto.gateway.CuspData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.CuspData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.CuspData}
 */
proto.gateway.CuspData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHouse(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartLongitude(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setZodiacSign(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDegrees(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.CuspData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.CuspData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.CuspData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.CuspData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHouse();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartLongitude();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getZodiacSign();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDegrees();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string house = 1;
 * @return {string}
 */
proto.gateway.CuspData.prototype.getHouse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.CuspData} returns this
 */
proto.gateway.CuspData.prototype.setHouse = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string start_longitude = 2;
 * @return {string}
 */
proto.gateway.CuspData.prototype.getStartLongitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.CuspData} returns this
 */
proto.gateway.CuspData.prototype.setStartLongitude = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string zodiac_sign = 3;
 * @return {string}
 */
proto.gateway.CuspData.prototype.getZodiacSign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.CuspData} returns this
 */
proto.gateway.CuspData.prototype.setZodiacSign = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string degrees = 4;
 * @return {string}
 */
proto.gateway.CuspData.prototype.getDegrees = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.CuspData} returns this
 */
proto.gateway.CuspData.prototype.setDegrees = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gateway.PlanetInfo.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.PlanetInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.PlanetInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.PlanetInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.PlanetInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
headersList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.gateway.PlanetData.toObject, includeInstance),
analysisList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.PlanetInfo}
 */
proto.gateway.PlanetInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.PlanetInfo;
  return proto.gateway.PlanetInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.PlanetInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.PlanetInfo}
 */
proto.gateway.PlanetInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addHeaders(value);
      break;
    case 2:
      var value = new proto.gateway.PlanetData;
      reader.readMessage(value,proto.gateway.PlanetData.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAnalysis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.PlanetInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.PlanetInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.PlanetInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.PlanetInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.gateway.PlanetData.serializeBinaryToWriter
    );
  }
  f = message.getAnalysisList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * repeated string headers = 1;
 * @return {!Array<string>}
 */
proto.gateway.PlanetInfo.prototype.getHeadersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.gateway.PlanetInfo} returns this
 */
proto.gateway.PlanetInfo.prototype.setHeadersList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.gateway.PlanetInfo} returns this
 */
proto.gateway.PlanetInfo.prototype.addHeaders = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.PlanetInfo} returns this
 */
proto.gateway.PlanetInfo.prototype.clearHeadersList = function() {
  return this.setHeadersList([]);
};


/**
 * repeated PlanetData data = 2;
 * @return {!Array<!proto.gateway.PlanetData>}
 */
proto.gateway.PlanetInfo.prototype.getDataList = function() {
  return /** @type{!Array<!proto.gateway.PlanetData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gateway.PlanetData, 2));
};


/**
 * @param {!Array<!proto.gateway.PlanetData>} value
 * @return {!proto.gateway.PlanetInfo} returns this
*/
proto.gateway.PlanetInfo.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.gateway.PlanetData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gateway.PlanetData}
 */
proto.gateway.PlanetInfo.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.gateway.PlanetData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.PlanetInfo} returns this
 */
proto.gateway.PlanetInfo.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * repeated string analysis = 3;
 * @return {!Array<string>}
 */
proto.gateway.PlanetInfo.prototype.getAnalysisList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.gateway.PlanetInfo} returns this
 */
proto.gateway.PlanetInfo.prototype.setAnalysisList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.gateway.PlanetInfo} returns this
 */
proto.gateway.PlanetInfo.prototype.addAnalysis = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.PlanetInfo} returns this
 */
proto.gateway.PlanetInfo.prototype.clearAnalysisList = function() {
  return this.setAnalysisList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.PlanetData.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.PlanetData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.PlanetData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.PlanetData.toObject = function(includeInstance, msg) {
  var f, obj = {
planet: jspb.Message.getFieldWithDefault(msg, 1, ""),
longitude: jspb.Message.getFieldWithDefault(msg, 2, ""),
zodiacSign: jspb.Message.getFieldWithDefault(msg, 3, ""),
degrees: jspb.Message.getFieldWithDefault(msg, 4, ""),
house: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.PlanetData}
 */
proto.gateway.PlanetData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.PlanetData;
  return proto.gateway.PlanetData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.PlanetData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.PlanetData}
 */
proto.gateway.PlanetData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanet(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLongitude(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setZodiacSign(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDegrees(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHouse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.PlanetData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.PlanetData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.PlanetData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.PlanetData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlanet();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLongitude();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getZodiacSign();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDegrees();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHouse();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string planet = 1;
 * @return {string}
 */
proto.gateway.PlanetData.prototype.getPlanet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.PlanetData} returns this
 */
proto.gateway.PlanetData.prototype.setPlanet = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string longitude = 2;
 * @return {string}
 */
proto.gateway.PlanetData.prototype.getLongitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.PlanetData} returns this
 */
proto.gateway.PlanetData.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string zodiac_sign = 3;
 * @return {string}
 */
proto.gateway.PlanetData.prototype.getZodiacSign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.PlanetData} returns this
 */
proto.gateway.PlanetData.prototype.setZodiacSign = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string degrees = 4;
 * @return {string}
 */
proto.gateway.PlanetData.prototype.getDegrees = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.PlanetData} returns this
 */
proto.gateway.PlanetData.prototype.setDegrees = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string house = 5;
 * @return {string}
 */
proto.gateway.PlanetData.prototype.getHouse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.PlanetData} returns this
 */
proto.gateway.PlanetData.prototype.setHouse = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gateway.AspectInfo.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.AspectInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.AspectInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.AspectInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.AspectInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
headersList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.gateway.AspectData.toObject, includeInstance),
analysisList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.AspectInfo}
 */
proto.gateway.AspectInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.AspectInfo;
  return proto.gateway.AspectInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.AspectInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.AspectInfo}
 */
proto.gateway.AspectInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addHeaders(value);
      break;
    case 2:
      var value = new proto.gateway.AspectData;
      reader.readMessage(value,proto.gateway.AspectData.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAnalysis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.AspectInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.AspectInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.AspectInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.AspectInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.gateway.AspectData.serializeBinaryToWriter
    );
  }
  f = message.getAnalysisList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * repeated string headers = 1;
 * @return {!Array<string>}
 */
proto.gateway.AspectInfo.prototype.getHeadersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.gateway.AspectInfo} returns this
 */
proto.gateway.AspectInfo.prototype.setHeadersList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.gateway.AspectInfo} returns this
 */
proto.gateway.AspectInfo.prototype.addHeaders = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.AspectInfo} returns this
 */
proto.gateway.AspectInfo.prototype.clearHeadersList = function() {
  return this.setHeadersList([]);
};


/**
 * repeated AspectData data = 2;
 * @return {!Array<!proto.gateway.AspectData>}
 */
proto.gateway.AspectInfo.prototype.getDataList = function() {
  return /** @type{!Array<!proto.gateway.AspectData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gateway.AspectData, 2));
};


/**
 * @param {!Array<!proto.gateway.AspectData>} value
 * @return {!proto.gateway.AspectInfo} returns this
*/
proto.gateway.AspectInfo.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.gateway.AspectData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gateway.AspectData}
 */
proto.gateway.AspectInfo.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.gateway.AspectData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.AspectInfo} returns this
 */
proto.gateway.AspectInfo.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * repeated string analysis = 3;
 * @return {!Array<string>}
 */
proto.gateway.AspectInfo.prototype.getAnalysisList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.gateway.AspectInfo} returns this
 */
proto.gateway.AspectInfo.prototype.setAnalysisList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.gateway.AspectInfo} returns this
 */
proto.gateway.AspectInfo.prototype.addAnalysis = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.AspectInfo} returns this
 */
proto.gateway.AspectInfo.prototype.clearAnalysisList = function() {
  return this.setAnalysisList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.AspectData.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.AspectData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.AspectData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.AspectData.toObject = function(includeInstance, msg) {
  var f, obj = {
planet1: jspb.Message.getFieldWithDefault(msg, 1, ""),
planet2: jspb.Message.getFieldWithDefault(msg, 2, ""),
aspect: jspb.Message.getFieldWithDefault(msg, 3, ""),
angle: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.AspectData}
 */
proto.gateway.AspectData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.AspectData;
  return proto.gateway.AspectData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.AspectData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.AspectData}
 */
proto.gateway.AspectData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanet1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanet2(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAspect(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.AspectData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.AspectData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.AspectData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.AspectData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlanet1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlanet2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAspect();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAngle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string planet1 = 1;
 * @return {string}
 */
proto.gateway.AspectData.prototype.getPlanet1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.AspectData} returns this
 */
proto.gateway.AspectData.prototype.setPlanet1 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string planet2 = 2;
 * @return {string}
 */
proto.gateway.AspectData.prototype.getPlanet2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.AspectData} returns this
 */
proto.gateway.AspectData.prototype.setPlanet2 = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string aspect = 3;
 * @return {string}
 */
proto.gateway.AspectData.prototype.getAspect = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.AspectData} returns this
 */
proto.gateway.AspectData.prototype.setAspect = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string angle = 4;
 * @return {string}
 */
proto.gateway.AspectData.prototype.getAngle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.AspectData} returns this
 */
proto.gateway.AspectData.prototype.setAngle = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gateway.TransitInfo.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.TransitInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.TransitInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.TransitInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.TransitInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
headersList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.gateway.TransitData.toObject, includeInstance),
analysisList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.TransitInfo}
 */
proto.gateway.TransitInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.TransitInfo;
  return proto.gateway.TransitInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.TransitInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.TransitInfo}
 */
proto.gateway.TransitInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addHeaders(value);
      break;
    case 2:
      var value = new proto.gateway.TransitData;
      reader.readMessage(value,proto.gateway.TransitData.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAnalysis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.TransitInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.TransitInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.TransitInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.TransitInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.gateway.TransitData.serializeBinaryToWriter
    );
  }
  f = message.getAnalysisList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * repeated string headers = 1;
 * @return {!Array<string>}
 */
proto.gateway.TransitInfo.prototype.getHeadersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.gateway.TransitInfo} returns this
 */
proto.gateway.TransitInfo.prototype.setHeadersList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.gateway.TransitInfo} returns this
 */
proto.gateway.TransitInfo.prototype.addHeaders = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.TransitInfo} returns this
 */
proto.gateway.TransitInfo.prototype.clearHeadersList = function() {
  return this.setHeadersList([]);
};


/**
 * repeated TransitData data = 2;
 * @return {!Array<!proto.gateway.TransitData>}
 */
proto.gateway.TransitInfo.prototype.getDataList = function() {
  return /** @type{!Array<!proto.gateway.TransitData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gateway.TransitData, 2));
};


/**
 * @param {!Array<!proto.gateway.TransitData>} value
 * @return {!proto.gateway.TransitInfo} returns this
*/
proto.gateway.TransitInfo.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.gateway.TransitData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gateway.TransitData}
 */
proto.gateway.TransitInfo.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.gateway.TransitData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.TransitInfo} returns this
 */
proto.gateway.TransitInfo.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * repeated string analysis = 3;
 * @return {!Array<string>}
 */
proto.gateway.TransitInfo.prototype.getAnalysisList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.gateway.TransitInfo} returns this
 */
proto.gateway.TransitInfo.prototype.setAnalysisList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.gateway.TransitInfo} returns this
 */
proto.gateway.TransitInfo.prototype.addAnalysis = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gateway.TransitInfo} returns this
 */
proto.gateway.TransitInfo.prototype.clearAnalysisList = function() {
  return this.setAnalysisList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.TransitData.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.TransitData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.TransitData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.TransitData.toObject = function(includeInstance, msg) {
  var f, obj = {
planet: jspb.Message.getFieldWithDefault(msg, 1, ""),
currentLongitude: jspb.Message.getFieldWithDefault(msg, 2, ""),
zodiacSign: jspb.Message.getFieldWithDefault(msg, 3, ""),
degree: jspb.Message.getFieldWithDefault(msg, 4, ""),
correspondingNatalPlanet: jspb.Message.getFieldWithDefault(msg, 5, ""),
aspectType: jspb.Message.getFieldWithDefault(msg, 6, ""),
angle: jspb.Message.getFieldWithDefault(msg, 7, ""),
influence: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.TransitData}
 */
proto.gateway.TransitData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.TransitData;
  return proto.gateway.TransitData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.TransitData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.TransitData}
 */
proto.gateway.TransitData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanet(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentLongitude(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setZodiacSign(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDegree(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrespondingNatalPlanet(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAspectType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAngle(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfluence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.TransitData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.TransitData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.TransitData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.TransitData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlanet();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCurrentLongitude();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getZodiacSign();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDegree();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCorrespondingNatalPlanet();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAspectType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAngle();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getInfluence();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string planet = 1;
 * @return {string}
 */
proto.gateway.TransitData.prototype.getPlanet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.TransitData} returns this
 */
proto.gateway.TransitData.prototype.setPlanet = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string current_longitude = 2;
 * @return {string}
 */
proto.gateway.TransitData.prototype.getCurrentLongitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.TransitData} returns this
 */
proto.gateway.TransitData.prototype.setCurrentLongitude = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string zodiac_sign = 3;
 * @return {string}
 */
proto.gateway.TransitData.prototype.getZodiacSign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.TransitData} returns this
 */
proto.gateway.TransitData.prototype.setZodiacSign = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string degree = 4;
 * @return {string}
 */
proto.gateway.TransitData.prototype.getDegree = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.TransitData} returns this
 */
proto.gateway.TransitData.prototype.setDegree = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string corresponding_natal_planet = 5;
 * @return {string}
 */
proto.gateway.TransitData.prototype.getCorrespondingNatalPlanet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.TransitData} returns this
 */
proto.gateway.TransitData.prototype.setCorrespondingNatalPlanet = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string aspect_type = 6;
 * @return {string}
 */
proto.gateway.TransitData.prototype.getAspectType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.TransitData} returns this
 */
proto.gateway.TransitData.prototype.setAspectType = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string angle = 7;
 * @return {string}
 */
proto.gateway.TransitData.prototype.getAngle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.TransitData} returns this
 */
proto.gateway.TransitData.prototype.setAngle = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string influence = 8;
 * @return {string}
 */
proto.gateway.TransitData.prototype.getInfluence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.TransitData} returns this
 */
proto.gateway.TransitData.prototype.setInfluence = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.Horoscope.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.Horoscope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.Horoscope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.Horoscope.toObject = function(includeInstance, msg) {
  var f, obj = {
day: jspb.Message.getFieldWithDefault(msg, 1, ""),
month: jspb.Message.getFieldWithDefault(msg, 2, ""),
year: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.Horoscope}
 */
proto.gateway.Horoscope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.Horoscope;
  return proto.gateway.Horoscope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.Horoscope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.Horoscope}
 */
proto.gateway.Horoscope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDay(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMonth(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setYear(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.Horoscope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.Horoscope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.Horoscope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.Horoscope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDay();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMonth();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getYear();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string day = 1;
 * @return {string}
 */
proto.gateway.Horoscope.prototype.getDay = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.Horoscope} returns this
 */
proto.gateway.Horoscope.prototype.setDay = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string month = 2;
 * @return {string}
 */
proto.gateway.Horoscope.prototype.getMonth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.Horoscope} returns this
 */
proto.gateway.Horoscope.prototype.setMonth = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string year = 3;
 * @return {string}
 */
proto.gateway.Horoscope.prototype.getYear = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gateway.Horoscope} returns this
 */
proto.gateway.Horoscope.prototype.setYear = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.gateway.AspectType = {
  UNKNOWN: 0,
  CONJUNCTION: 1,
  OPPOSITION: 2,
  TRINE: 3,
  SQUARE: 4,
  SEXTILE: 5,
  INCONJUNCTION: 6
};

goog.object.extend(exports, proto.gateway);
