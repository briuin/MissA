// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "astro.proto" (package "horoscope", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { HoroscopeService } from "./astro";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CalculateAstroResponse } from "./astro";
import type { CalculateAstroRequest } from "./astro";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Define the horoscope service
 *
 * @generated from protobuf service horoscope.HoroscopeService
 */
export interface IHoroscopeServiceClient {
    /**
     * @generated from protobuf rpc: CalculateAstro(horoscope.CalculateAstroRequest) returns (horoscope.CalculateAstroResponse);
     */
    calculateAstro(input: CalculateAstroRequest, options?: RpcOptions): UnaryCall<CalculateAstroRequest, CalculateAstroResponse>;
}
/**
 * Define the horoscope service
 *
 * @generated from protobuf service horoscope.HoroscopeService
 */
export class HoroscopeServiceClient implements IHoroscopeServiceClient, ServiceInfo {
    typeName = HoroscopeService.typeName;
    methods = HoroscopeService.methods;
    options = HoroscopeService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CalculateAstro(horoscope.CalculateAstroRequest) returns (horoscope.CalculateAstroResponse);
     */
    calculateAstro(input: CalculateAstroRequest, options?: RpcOptions): UnaryCall<CalculateAstroRequest, CalculateAstroResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CalculateAstroRequest, CalculateAstroResponse>("unary", this._transport, method, opt, input);
    }
}
