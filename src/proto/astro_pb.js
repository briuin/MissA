// source: astro.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.horoscope.CalculateAstroRequest', null, global);
goog.exportSymbol('proto.horoscope.CalculateAstroResponse', null, global);
goog.exportSymbol('proto.horoscope.Houses', null, global);
goog.exportSymbol('proto.horoscope.Planet', null, global);
goog.exportSymbol('proto.horoscope.Sign', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.horoscope.CalculateAstroRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.horoscope.CalculateAstroRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.horoscope.CalculateAstroRequest.displayName = 'proto.horoscope.CalculateAstroRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.horoscope.CalculateAstroResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.horoscope.CalculateAstroResponse.repeatedFields_, null);
};
goog.inherits(proto.horoscope.CalculateAstroResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.horoscope.CalculateAstroResponse.displayName = 'proto.horoscope.CalculateAstroResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.horoscope.Planet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.horoscope.Planet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.horoscope.Planet.displayName = 'proto.horoscope.Planet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.horoscope.Houses = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.horoscope.Houses.repeatedFields_, null);
};
goog.inherits(proto.horoscope.Houses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.horoscope.Houses.displayName = 'proto.horoscope.Houses';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.horoscope.Sign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.horoscope.Sign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.horoscope.Sign.displayName = 'proto.horoscope.Sign';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.horoscope.CalculateAstroRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.horoscope.CalculateAstroRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.horoscope.CalculateAstroRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.horoscope.CalculateAstroRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
date: jspb.Message.getFieldWithDefault(msg, 1, ""),
time: jspb.Message.getFieldWithDefault(msg, 2, ""),
lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
lon: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.horoscope.CalculateAstroRequest}
 */
proto.horoscope.CalculateAstroRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.horoscope.CalculateAstroRequest;
  return proto.horoscope.CalculateAstroRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.horoscope.CalculateAstroRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.horoscope.CalculateAstroRequest}
 */
proto.horoscope.CalculateAstroRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.horoscope.CalculateAstroRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.horoscope.CalculateAstroRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.horoscope.CalculateAstroRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.horoscope.CalculateAstroRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getLon();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional string date = 1;
 * @return {string}
 */
proto.horoscope.CalculateAstroRequest.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.horoscope.CalculateAstroRequest} returns this
 */
proto.horoscope.CalculateAstroRequest.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string time = 2;
 * @return {string}
 */
proto.horoscope.CalculateAstroRequest.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.horoscope.CalculateAstroRequest} returns this
 */
proto.horoscope.CalculateAstroRequest.prototype.setTime = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional float lat = 3;
 * @return {number}
 */
proto.horoscope.CalculateAstroRequest.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.horoscope.CalculateAstroRequest} returns this
 */
proto.horoscope.CalculateAstroRequest.prototype.setLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float lon = 4;
 * @return {number}
 */
proto.horoscope.CalculateAstroRequest.prototype.getLon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.horoscope.CalculateAstroRequest} returns this
 */
proto.horoscope.CalculateAstroRequest.prototype.setLon = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.horoscope.CalculateAstroResponse.repeatedFields_ = [1,2,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.horoscope.CalculateAstroResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.horoscope.CalculateAstroResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.horoscope.CalculateAstroResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.horoscope.CalculateAstroResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
planetsList: jspb.Message.toObjectList(msg.getPlanetsList(),
    proto.horoscope.Planet.toObject, includeInstance),
currentplanetsList: jspb.Message.toObjectList(msg.getCurrentplanetsList(),
    proto.horoscope.Planet.toObject, includeInstance),
houses: (f = msg.getHouses()) && proto.horoscope.Houses.toObject(includeInstance, f),
currentHouses: (f = msg.getCurrentHouses()) && proto.horoscope.Houses.toObject(includeInstance, f),
signsList: jspb.Message.toObjectList(msg.getSignsList(),
    proto.horoscope.Sign.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.horoscope.CalculateAstroResponse}
 */
proto.horoscope.CalculateAstroResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.horoscope.CalculateAstroResponse;
  return proto.horoscope.CalculateAstroResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.horoscope.CalculateAstroResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.horoscope.CalculateAstroResponse}
 */
proto.horoscope.CalculateAstroResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.horoscope.Planet;
      reader.readMessage(value,proto.horoscope.Planet.deserializeBinaryFromReader);
      msg.addPlanets(value);
      break;
    case 2:
      var value = new proto.horoscope.Planet;
      reader.readMessage(value,proto.horoscope.Planet.deserializeBinaryFromReader);
      msg.addCurrentplanets(value);
      break;
    case 3:
      var value = new proto.horoscope.Houses;
      reader.readMessage(value,proto.horoscope.Houses.deserializeBinaryFromReader);
      msg.setHouses(value);
      break;
    case 4:
      var value = new proto.horoscope.Houses;
      reader.readMessage(value,proto.horoscope.Houses.deserializeBinaryFromReader);
      msg.setCurrentHouses(value);
      break;
    case 5:
      var value = new proto.horoscope.Sign;
      reader.readMessage(value,proto.horoscope.Sign.deserializeBinaryFromReader);
      msg.addSigns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.horoscope.CalculateAstroResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.horoscope.CalculateAstroResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.horoscope.CalculateAstroResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.horoscope.CalculateAstroResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlanetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.horoscope.Planet.serializeBinaryToWriter
    );
  }
  f = message.getCurrentplanetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.horoscope.Planet.serializeBinaryToWriter
    );
  }
  f = message.getHouses();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.horoscope.Houses.serializeBinaryToWriter
    );
  }
  f = message.getCurrentHouses();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.horoscope.Houses.serializeBinaryToWriter
    );
  }
  f = message.getSignsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.horoscope.Sign.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Planet planets = 1;
 * @return {!Array<!proto.horoscope.Planet>}
 */
proto.horoscope.CalculateAstroResponse.prototype.getPlanetsList = function() {
  return /** @type{!Array<!proto.horoscope.Planet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.horoscope.Planet, 1));
};


/**
 * @param {!Array<!proto.horoscope.Planet>} value
 * @return {!proto.horoscope.CalculateAstroResponse} returns this
*/
proto.horoscope.CalculateAstroResponse.prototype.setPlanetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.horoscope.Planet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.horoscope.Planet}
 */
proto.horoscope.CalculateAstroResponse.prototype.addPlanets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.horoscope.Planet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.horoscope.CalculateAstroResponse} returns this
 */
proto.horoscope.CalculateAstroResponse.prototype.clearPlanetsList = function() {
  return this.setPlanetsList([]);
};


/**
 * repeated Planet currentPlanets = 2;
 * @return {!Array<!proto.horoscope.Planet>}
 */
proto.horoscope.CalculateAstroResponse.prototype.getCurrentplanetsList = function() {
  return /** @type{!Array<!proto.horoscope.Planet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.horoscope.Planet, 2));
};


/**
 * @param {!Array<!proto.horoscope.Planet>} value
 * @return {!proto.horoscope.CalculateAstroResponse} returns this
*/
proto.horoscope.CalculateAstroResponse.prototype.setCurrentplanetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.horoscope.Planet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.horoscope.Planet}
 */
proto.horoscope.CalculateAstroResponse.prototype.addCurrentplanets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.horoscope.Planet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.horoscope.CalculateAstroResponse} returns this
 */
proto.horoscope.CalculateAstroResponse.prototype.clearCurrentplanetsList = function() {
  return this.setCurrentplanetsList([]);
};


/**
 * optional Houses houses = 3;
 * @return {?proto.horoscope.Houses}
 */
proto.horoscope.CalculateAstroResponse.prototype.getHouses = function() {
  return /** @type{?proto.horoscope.Houses} */ (
    jspb.Message.getWrapperField(this, proto.horoscope.Houses, 3));
};


/**
 * @param {?proto.horoscope.Houses|undefined} value
 * @return {!proto.horoscope.CalculateAstroResponse} returns this
*/
proto.horoscope.CalculateAstroResponse.prototype.setHouses = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.horoscope.CalculateAstroResponse} returns this
 */
proto.horoscope.CalculateAstroResponse.prototype.clearHouses = function() {
  return this.setHouses(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.horoscope.CalculateAstroResponse.prototype.hasHouses = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Houses current_houses = 4;
 * @return {?proto.horoscope.Houses}
 */
proto.horoscope.CalculateAstroResponse.prototype.getCurrentHouses = function() {
  return /** @type{?proto.horoscope.Houses} */ (
    jspb.Message.getWrapperField(this, proto.horoscope.Houses, 4));
};


/**
 * @param {?proto.horoscope.Houses|undefined} value
 * @return {!proto.horoscope.CalculateAstroResponse} returns this
*/
proto.horoscope.CalculateAstroResponse.prototype.setCurrentHouses = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.horoscope.CalculateAstroResponse} returns this
 */
proto.horoscope.CalculateAstroResponse.prototype.clearCurrentHouses = function() {
  return this.setCurrentHouses(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.horoscope.CalculateAstroResponse.prototype.hasCurrentHouses = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Sign signs = 5;
 * @return {!Array<!proto.horoscope.Sign>}
 */
proto.horoscope.CalculateAstroResponse.prototype.getSignsList = function() {
  return /** @type{!Array<!proto.horoscope.Sign>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.horoscope.Sign, 5));
};


/**
 * @param {!Array<!proto.horoscope.Sign>} value
 * @return {!proto.horoscope.CalculateAstroResponse} returns this
*/
proto.horoscope.CalculateAstroResponse.prototype.setSignsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.horoscope.Sign=} opt_value
 * @param {number=} opt_index
 * @return {!proto.horoscope.Sign}
 */
proto.horoscope.CalculateAstroResponse.prototype.addSigns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.horoscope.Sign, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.horoscope.CalculateAstroResponse} returns this
 */
proto.horoscope.CalculateAstroResponse.prototype.clearSignsList = function() {
  return this.setSignsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.horoscope.Planet.prototype.toObject = function(opt_includeInstance) {
  return proto.horoscope.Planet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.horoscope.Planet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.horoscope.Planet.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.horoscope.Planet}
 */
proto.horoscope.Planet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.horoscope.Planet;
  return proto.horoscope.Planet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.horoscope.Planet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.horoscope.Planet}
 */
proto.horoscope.Planet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.horoscope.Planet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.horoscope.Planet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.horoscope.Planet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.horoscope.Planet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.horoscope.Planet.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.horoscope.Planet} returns this
 */
proto.horoscope.Planet.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double longitude = 2;
 * @return {number}
 */
proto.horoscope.Planet.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.horoscope.Planet} returns this
 */
proto.horoscope.Planet.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.horoscope.Houses.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.horoscope.Houses.prototype.toObject = function(opt_includeInstance) {
  return proto.horoscope.Houses.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.horoscope.Houses} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.horoscope.Houses.toObject = function(includeInstance, msg) {
  var f, obj = {
houseList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
ascendant: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
mc: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
armc: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
vertex: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
equatorialascendant: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
kochcoascendant: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
munkaseycoascendant: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
munkaseypolarascendant: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.horoscope.Houses}
 */
proto.horoscope.Houses.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.horoscope.Houses;
  return proto.horoscope.Houses.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.horoscope.Houses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.horoscope.Houses}
 */
proto.horoscope.Houses.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addHouse(values[i]);
      }
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAscendant(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMc(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setArmc(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVertex(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEquatorialascendant(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setKochcoascendant(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMunkaseycoascendant(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMunkaseypolarascendant(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.horoscope.Houses.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.horoscope.Houses.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.horoscope.Houses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.horoscope.Houses.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHouseList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getAscendant();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMc();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getArmc();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getVertex();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getEquatorialascendant();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getKochcoascendant();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getMunkaseycoascendant();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getMunkaseypolarascendant();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
};


/**
 * repeated int32 house = 1;
 * @return {!Array<number>}
 */
proto.horoscope.Houses.prototype.getHouseList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.horoscope.Houses} returns this
 */
proto.horoscope.Houses.prototype.setHouseList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.horoscope.Houses} returns this
 */
proto.horoscope.Houses.prototype.addHouse = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.horoscope.Houses} returns this
 */
proto.horoscope.Houses.prototype.clearHouseList = function() {
  return this.setHouseList([]);
};


/**
 * optional double ascendant = 2;
 * @return {number}
 */
proto.horoscope.Houses.prototype.getAscendant = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.horoscope.Houses} returns this
 */
proto.horoscope.Houses.prototype.setAscendant = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double mc = 3;
 * @return {number}
 */
proto.horoscope.Houses.prototype.getMc = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.horoscope.Houses} returns this
 */
proto.horoscope.Houses.prototype.setMc = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double armc = 4;
 * @return {number}
 */
proto.horoscope.Houses.prototype.getArmc = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.horoscope.Houses} returns this
 */
proto.horoscope.Houses.prototype.setArmc = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double vertex = 5;
 * @return {number}
 */
proto.horoscope.Houses.prototype.getVertex = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.horoscope.Houses} returns this
 */
proto.horoscope.Houses.prototype.setVertex = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double equatorialAscendant = 6;
 * @return {number}
 */
proto.horoscope.Houses.prototype.getEquatorialascendant = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.horoscope.Houses} returns this
 */
proto.horoscope.Houses.prototype.setEquatorialascendant = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double kochCoAscendant = 7;
 * @return {number}
 */
proto.horoscope.Houses.prototype.getKochcoascendant = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.horoscope.Houses} returns this
 */
proto.horoscope.Houses.prototype.setKochcoascendant = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double munkaseyCoAscendant = 8;
 * @return {number}
 */
proto.horoscope.Houses.prototype.getMunkaseycoascendant = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.horoscope.Houses} returns this
 */
proto.horoscope.Houses.prototype.setMunkaseycoascendant = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double munkaseyPolarAscendant = 9;
 * @return {number}
 */
proto.horoscope.Houses.prototype.getMunkaseypolarascendant = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.horoscope.Houses} returns this
 */
proto.horoscope.Houses.prototype.setMunkaseypolarascendant = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.horoscope.Sign.prototype.toObject = function(opt_includeInstance) {
  return proto.horoscope.Sign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.horoscope.Sign} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.horoscope.Sign.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
sign: jspb.Message.getFieldWithDefault(msg, 2, ""),
house: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.horoscope.Sign}
 */
proto.horoscope.Sign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.horoscope.Sign;
  return proto.horoscope.Sign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.horoscope.Sign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.horoscope.Sign}
 */
proto.horoscope.Sign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSign(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHouse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.horoscope.Sign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.horoscope.Sign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.horoscope.Sign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.horoscope.Sign.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSign();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHouse();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.horoscope.Sign.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.horoscope.Sign} returns this
 */
proto.horoscope.Sign.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sign = 2;
 * @return {string}
 */
proto.horoscope.Sign.prototype.getSign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.horoscope.Sign} returns this
 */
proto.horoscope.Sign.prototype.setSign = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 house = 3;
 * @return {number}
 */
proto.horoscope.Sign.prototype.getHouse = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.horoscope.Sign} returns this
 */
proto.horoscope.Sign.prototype.setHouse = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.horoscope);
