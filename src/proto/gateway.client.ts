// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "gateway.proto" (package "gateway", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { GatewayService } from "./gateway";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetHoroscopeAnalysisResponse } from "./gateway";
import type { GetHoroscopeAnalysisRequest } from "./gateway";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Service Definition
 *
 * @generated from protobuf service gateway.GatewayService
 */
export interface IGatewayServiceClient {
    /**
     * @generated from protobuf rpc: GetHoroscopeAnalysis(gateway.GetHoroscopeAnalysisRequest) returns (gateway.GetHoroscopeAnalysisResponse);
     */
    getHoroscopeAnalysis(input: GetHoroscopeAnalysisRequest, options?: RpcOptions): UnaryCall<GetHoroscopeAnalysisRequest, GetHoroscopeAnalysisResponse>;
}
/**
 * Service Definition
 *
 * @generated from protobuf service gateway.GatewayService
 */
export class GatewayServiceClient implements IGatewayServiceClient, ServiceInfo {
    typeName = GatewayService.typeName;
    methods = GatewayService.methods;
    options = GatewayService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetHoroscopeAnalysis(gateway.GetHoroscopeAnalysisRequest) returns (gateway.GetHoroscopeAnalysisResponse);
     */
    getHoroscopeAnalysis(input: GetHoroscopeAnalysisRequest, options?: RpcOptions): UnaryCall<GetHoroscopeAnalysisRequest, GetHoroscopeAnalysisResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetHoroscopeAnalysisRequest, GetHoroscopeAnalysisResponse>("unary", this._transport, method, opt, input);
    }
}
