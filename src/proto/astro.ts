// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "astro.proto" (package "horoscope", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message horoscope.CalculateAstroRequest
 */
export interface CalculateAstroRequest {
    /**
     * @generated from protobuf field: string date = 1;
     */
    date: string;
    /**
     * @generated from protobuf field: string time = 2;
     */
    time: string;
    /**
     * @generated from protobuf field: float lat = 3;
     */
    lat: number;
    /**
     * @generated from protobuf field: float lon = 4;
     */
    lon: number;
}
/**
 * @generated from protobuf message horoscope.CalculateAstroResponse
 */
export interface CalculateAstroResponse {
    /**
     * @generated from protobuf field: repeated horoscope.Planet planets = 1;
     */
    planets: Planet[];
    /**
     * @generated from protobuf field: repeated horoscope.Planet currentPlanets = 2;
     */
    currentPlanets: Planet[];
    /**
     * @generated from protobuf field: horoscope.Houses houses = 3;
     */
    houses?: Houses;
    /**
     * @generated from protobuf field: horoscope.Houses current_houses = 4;
     */
    currentHouses?: Houses;
    /**
     * @generated from protobuf field: repeated horoscope.Sign signs = 5;
     */
    signs: Sign[];
}
/**
 * Message representing a planet's data.
 *
 * @generated from protobuf message horoscope.Planet
 */
export interface Planet {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: double longitude = 2;
     */
    longitude: number;
}
/**
 * Message representing a house's data.
 * Define the fields based on your actual house structure.
 *
 * @generated from protobuf message horoscope.Houses
 */
export interface Houses {
    /**
     * @generated from protobuf field: repeated int32 house = 1;
     */
    house: number[];
    /**
     * @generated from protobuf field: double ascendant = 2;
     */
    ascendant: number;
    /**
     * @generated from protobuf field: double mc = 3;
     */
    mc: number;
    /**
     * @generated from protobuf field: double armc = 4;
     */
    armc: number;
    /**
     * @generated from protobuf field: double vertex = 5;
     */
    vertex: number;
    /**
     * @generated from protobuf field: double equatorialAscendant = 6;
     */
    equatorialAscendant: number;
    /**
     * @generated from protobuf field: double kochCoAscendant = 7;
     */
    kochCoAscendant: number;
    /**
     * @generated from protobuf field: double munkaseyCoAscendant = 8;
     */
    munkaseyCoAscendant: number;
    /**
     * @generated from protobuf field: double munkaseyPolarAscendant = 9;
     */
    munkaseyPolarAscendant: number;
}
/**
 * Message representing a sign's data.
 * Define the fields based on your actual sign structure.
 *
 * @generated from protobuf message horoscope.Sign
 */
export interface Sign {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string sign = 2;
     */
    sign: string;
    /**
     * @generated from protobuf field: int32 house = 3;
     */
    house: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class CalculateAstroRequest$Type extends MessageType<CalculateAstroRequest> {
    constructor() {
        super("horoscope.CalculateAstroRequest", [
            { no: 1, name: "date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lat", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "lon", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<CalculateAstroRequest>): CalculateAstroRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.date = "";
        message.time = "";
        message.lat = 0;
        message.lon = 0;
        if (value !== undefined)
            reflectionMergePartial<CalculateAstroRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CalculateAstroRequest): CalculateAstroRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string date */ 1:
                    message.date = reader.string();
                    break;
                case /* string time */ 2:
                    message.time = reader.string();
                    break;
                case /* float lat */ 3:
                    message.lat = reader.float();
                    break;
                case /* float lon */ 4:
                    message.lon = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CalculateAstroRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string date = 1; */
        if (message.date !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.date);
        /* string time = 2; */
        if (message.time !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.time);
        /* float lat = 3; */
        if (message.lat !== 0)
            writer.tag(3, WireType.Bit32).float(message.lat);
        /* float lon = 4; */
        if (message.lon !== 0)
            writer.tag(4, WireType.Bit32).float(message.lon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message horoscope.CalculateAstroRequest
 */
export const CalculateAstroRequest = new CalculateAstroRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CalculateAstroResponse$Type extends MessageType<CalculateAstroResponse> {
    constructor() {
        super("horoscope.CalculateAstroResponse", [
            { no: 1, name: "planets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Planet },
            { no: 2, name: "currentPlanets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Planet },
            { no: 3, name: "houses", kind: "message", T: () => Houses },
            { no: 4, name: "current_houses", kind: "message", T: () => Houses },
            { no: 5, name: "signs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Sign }
        ]);
    }
    create(value?: PartialMessage<CalculateAstroResponse>): CalculateAstroResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.planets = [];
        message.currentPlanets = [];
        message.signs = [];
        if (value !== undefined)
            reflectionMergePartial<CalculateAstroResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CalculateAstroResponse): CalculateAstroResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated horoscope.Planet planets */ 1:
                    message.planets.push(Planet.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated horoscope.Planet currentPlanets */ 2:
                    message.currentPlanets.push(Planet.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* horoscope.Houses houses */ 3:
                    message.houses = Houses.internalBinaryRead(reader, reader.uint32(), options, message.houses);
                    break;
                case /* horoscope.Houses current_houses */ 4:
                    message.currentHouses = Houses.internalBinaryRead(reader, reader.uint32(), options, message.currentHouses);
                    break;
                case /* repeated horoscope.Sign signs */ 5:
                    message.signs.push(Sign.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CalculateAstroResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated horoscope.Planet planets = 1; */
        for (let i = 0; i < message.planets.length; i++)
            Planet.internalBinaryWrite(message.planets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated horoscope.Planet currentPlanets = 2; */
        for (let i = 0; i < message.currentPlanets.length; i++)
            Planet.internalBinaryWrite(message.currentPlanets[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* horoscope.Houses houses = 3; */
        if (message.houses)
            Houses.internalBinaryWrite(message.houses, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* horoscope.Houses current_houses = 4; */
        if (message.currentHouses)
            Houses.internalBinaryWrite(message.currentHouses, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated horoscope.Sign signs = 5; */
        for (let i = 0; i < message.signs.length; i++)
            Sign.internalBinaryWrite(message.signs[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message horoscope.CalculateAstroResponse
 */
export const CalculateAstroResponse = new CalculateAstroResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Planet$Type extends MessageType<Planet> {
    constructor() {
        super("horoscope.Planet", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "longitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<Planet>): Planet {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.longitude = 0;
        if (value !== undefined)
            reflectionMergePartial<Planet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Planet): Planet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* double longitude */ 2:
                    message.longitude = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Planet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* double longitude = 2; */
        if (message.longitude !== 0)
            writer.tag(2, WireType.Bit64).double(message.longitude);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message horoscope.Planet
 */
export const Planet = new Planet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Houses$Type extends MessageType<Houses> {
    constructor() {
        super("horoscope.Houses", [
            { no: 1, name: "house", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "ascendant", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "mc", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "armc", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "vertex", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "equatorialAscendant", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "kochCoAscendant", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "munkaseyCoAscendant", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "munkaseyPolarAscendant", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<Houses>): Houses {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.house = [];
        message.ascendant = 0;
        message.mc = 0;
        message.armc = 0;
        message.vertex = 0;
        message.equatorialAscendant = 0;
        message.kochCoAscendant = 0;
        message.munkaseyCoAscendant = 0;
        message.munkaseyPolarAscendant = 0;
        if (value !== undefined)
            reflectionMergePartial<Houses>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Houses): Houses {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 house */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.house.push(reader.int32());
                    else
                        message.house.push(reader.int32());
                    break;
                case /* double ascendant */ 2:
                    message.ascendant = reader.double();
                    break;
                case /* double mc */ 3:
                    message.mc = reader.double();
                    break;
                case /* double armc */ 4:
                    message.armc = reader.double();
                    break;
                case /* double vertex */ 5:
                    message.vertex = reader.double();
                    break;
                case /* double equatorialAscendant */ 6:
                    message.equatorialAscendant = reader.double();
                    break;
                case /* double kochCoAscendant */ 7:
                    message.kochCoAscendant = reader.double();
                    break;
                case /* double munkaseyCoAscendant */ 8:
                    message.munkaseyCoAscendant = reader.double();
                    break;
                case /* double munkaseyPolarAscendant */ 9:
                    message.munkaseyPolarAscendant = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Houses, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 house = 1; */
        if (message.house.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.house.length; i++)
                writer.int32(message.house[i]);
            writer.join();
        }
        /* double ascendant = 2; */
        if (message.ascendant !== 0)
            writer.tag(2, WireType.Bit64).double(message.ascendant);
        /* double mc = 3; */
        if (message.mc !== 0)
            writer.tag(3, WireType.Bit64).double(message.mc);
        /* double armc = 4; */
        if (message.armc !== 0)
            writer.tag(4, WireType.Bit64).double(message.armc);
        /* double vertex = 5; */
        if (message.vertex !== 0)
            writer.tag(5, WireType.Bit64).double(message.vertex);
        /* double equatorialAscendant = 6; */
        if (message.equatorialAscendant !== 0)
            writer.tag(6, WireType.Bit64).double(message.equatorialAscendant);
        /* double kochCoAscendant = 7; */
        if (message.kochCoAscendant !== 0)
            writer.tag(7, WireType.Bit64).double(message.kochCoAscendant);
        /* double munkaseyCoAscendant = 8; */
        if (message.munkaseyCoAscendant !== 0)
            writer.tag(8, WireType.Bit64).double(message.munkaseyCoAscendant);
        /* double munkaseyPolarAscendant = 9; */
        if (message.munkaseyPolarAscendant !== 0)
            writer.tag(9, WireType.Bit64).double(message.munkaseyPolarAscendant);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message horoscope.Houses
 */
export const Houses = new Houses$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Sign$Type extends MessageType<Sign> {
    constructor() {
        super("horoscope.Sign", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sign", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "house", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Sign>): Sign {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.sign = "";
        message.house = 0;
        if (value !== undefined)
            reflectionMergePartial<Sign>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Sign): Sign {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string sign */ 2:
                    message.sign = reader.string();
                    break;
                case /* int32 house */ 3:
                    message.house = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Sign, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string sign = 2; */
        if (message.sign !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sign);
        /* int32 house = 3; */
        if (message.house !== 0)
            writer.tag(3, WireType.Varint).int32(message.house);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message horoscope.Sign
 */
export const Sign = new Sign$Type();
/**
 * @generated ServiceType for protobuf service horoscope.HoroscopeService
 */
export const HoroscopeService = new ServiceType("horoscope.HoroscopeService", [
    { name: "CalculateAstro", options: {}, I: CalculateAstroRequest, O: CalculateAstroResponse }
]);
