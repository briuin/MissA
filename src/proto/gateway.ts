// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "gateway.proto" (package "gateway", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message gateway.GetHoroscopeAnalysisRequest
 */
export interface GetHoroscopeAnalysisRequest {
    /**
     * @generated from protobuf field: string date = 1;
     */
    date: string;
    /**
     * @generated from protobuf field: string time = 2;
     */
    time: string;
    /**
     * @generated from protobuf field: double lat = 3;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lon = 4;
     */
    lon: number;
}
/**
 * Response Message
 *
 * @generated from protobuf message gateway.GetHoroscopeAnalysisResponse
 */
export interface GetHoroscopeAnalysisResponse {
    /**
     * @generated from protobuf field: gateway.Analysis analysis = 1;
     */
    analysis?: Analysis;
    /**
     * @generated from protobuf field: gateway.HoroscopeData data = 2;
     */
    data?: HoroscopeData;
}
/**
 * @generated from protobuf message gateway.Analysis
 */
export interface Analysis {
    /**
     * @generated from protobuf field: gateway.Cusp cusp = 1;
     */
    cusp?: Cusp;
    /**
     * @generated from protobuf field: gateway.PlanetInfo planet = 2;
     */
    planet?: PlanetInfo;
    /**
     * @generated from protobuf field: gateway.AspectInfo aspect = 3;
     */
    aspect?: AspectInfo;
    /**
     * @generated from protobuf field: gateway.TransitInfo transit = 4;
     */
    transit?: TransitInfo;
    /**
     * @generated from protobuf field: string ascendant = 5;
     */
    ascendant: string;
    /**
     * @generated from protobuf field: gateway.Horoscope horoscope = 6;
     */
    horoscope?: Horoscope;
    /**
     * @generated from protobuf field: string summary = 7;
     */
    summary: string;
}
/**
 * @generated from protobuf message gateway.HoroscopeData
 */
export interface HoroscopeData {
    /**
     * @generated from protobuf field: repeated gateway.Planet planets = 1;
     */
    planets: Planet[];
    /**
     * @generated from protobuf field: repeated gateway.Planet current_planets = 2;
     */
    currentPlanets: Planet[];
    /**
     * @generated from protobuf field: gateway.Houses houses = 3;
     */
    houses?: Houses;
    /**
     * @generated from protobuf field: gateway.Houses current_houses = 4;
     */
    currentHouses?: Houses;
    /**
     * @generated from protobuf field: repeated gateway.Sign signs = 5;
     */
    signs: Sign[];
}
/**
 * Planet Message
 *
 * @generated from protobuf message gateway.Planet
 */
export interface Planet {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string longitude = 2;
     */
    longitude: string;
}
/**
 * Houses Message
 *
 * @generated from protobuf message gateway.Houses
 */
export interface Houses {
    /**
     * @generated from protobuf field: repeated int32 house = 1;
     */
    house: number[];
    /**
     * @generated from protobuf field: double ascendant = 2;
     */
    ascendant: number;
    /**
     * @generated from protobuf field: double mc = 3;
     */
    mc: number;
    /**
     * @generated from protobuf field: double armc = 4;
     */
    armc: number;
    /**
     * @generated from protobuf field: double vertex = 5;
     */
    vertex: number;
    /**
     * @generated from protobuf field: double equatorial_ascendant = 6;
     */
    equatorialAscendant: number;
    /**
     * @generated from protobuf field: double koch_co_ascendant = 7;
     */
    kochCoAscendant: number;
    /**
     * @generated from protobuf field: double munkasey_co_ascendant = 8;
     */
    munkaseyCoAscendant: number;
    /**
     * @generated from protobuf field: double munkasey_polar_ascendant = 9;
     */
    munkaseyPolarAscendant: number;
}
/**
 * Sign Message
 *
 * @generated from protobuf message gateway.Sign
 */
export interface Sign {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string sign = 2;
     */
    sign: string;
    /**
     * @generated from protobuf field: int32 house = 3;
     */
    house: number;
}
/**
 * Cusp Message
 *
 * @generated from protobuf message gateway.Cusp
 */
export interface Cusp {
    /**
     * @generated from protobuf field: repeated string headers = 1;
     */
    headers: string[];
    /**
     * @generated from protobuf field: repeated gateway.CuspData data = 2;
     */
    data: CuspData[];
    /**
     * @generated from protobuf field: repeated string analysis = 3;
     */
    analysis: string[];
}
/**
 * Cusp Data Message
 *
 * @generated from protobuf message gateway.CuspData
 */
export interface CuspData {
    /**
     * @generated from protobuf field: string house = 1;
     */
    house: string; // House
    /**
     * @generated from protobuf field: string start_longitude = 2;
     */
    startLongitude: string; // Cusp Longitude (°)
    /**
     * @generated from protobuf field: string zodiac_sign = 3;
     */
    zodiacSign: string; // Zodiac Sign
    /**
     * @generated from protobuf field: string degrees = 4;
     */
    degrees: string; // Degree
}
/**
 * Planet Information Message
 *
 * @generated from protobuf message gateway.PlanetInfo
 */
export interface PlanetInfo {
    /**
     * @generated from protobuf field: repeated string headers = 1;
     */
    headers: string[];
    /**
     * @generated from protobuf field: repeated gateway.PlanetData data = 2;
     */
    data: PlanetData[];
    /**
     * @generated from protobuf field: repeated string analysis = 3;
     */
    analysis: string[];
}
/**
 * Planet Data Message
 *
 * @generated from protobuf message gateway.PlanetData
 */
export interface PlanetData {
    /**
     * @generated from protobuf field: string planet = 1;
     */
    planet: string; // Planet
    /**
     * @generated from protobuf field: string longitude = 2;
     */
    longitude: string; // Longitude (°)
    /**
     * @generated from protobuf field: string zodiac_sign = 3;
     */
    zodiacSign: string; // Zodiac Sign
    /**
     * @generated from protobuf field: string degrees = 4;
     */
    degrees: string; // Degree
    /**
     * @generated from protobuf field: string house = 5;
     */
    house: string; // House
}
/**
 * Aspect Information Message
 *
 * @generated from protobuf message gateway.AspectInfo
 */
export interface AspectInfo {
    /**
     * @generated from protobuf field: repeated string headers = 1;
     */
    headers: string[];
    /**
     * @generated from protobuf field: repeated gateway.AspectData data = 2;
     */
    data: AspectData[];
    /**
     * @generated from protobuf field: repeated string analysis = 3;
     */
    analysis: string[];
}
/**
 * Aspect Data Message
 *
 * @generated from protobuf message gateway.AspectData
 */
export interface AspectData {
    /**
     * @generated from protobuf field: string planet1 = 1;
     */
    planet1: string; // Planet1
    /**
     * @generated from protobuf field: string planet2 = 2;
     */
    planet2: string; // Planet2
    /**
     * @generated from protobuf field: string aspect = 3;
     */
    aspect: string; // Aspect
    /**
     * @generated from protobuf field: string angle = 4;
     */
    angle: string; // Angle (°)
}
/**
 * Transit Information Message
 *
 * @generated from protobuf message gateway.TransitInfo
 */
export interface TransitInfo {
    /**
     * @generated from protobuf field: repeated string headers = 1;
     */
    headers: string[];
    /**
     * @generated from protobuf field: repeated gateway.TransitData data = 2;
     */
    data: TransitData[];
    /**
     * @generated from protobuf field: repeated string analysis = 3;
     */
    analysis: string[];
}
/**
 * Transit Data Message
 *
 * @generated from protobuf message gateway.TransitData
 */
export interface TransitData {
    /**
     * @generated from protobuf field: string planet = 1;
     */
    planet: string; // Planet
    /**
     * @generated from protobuf field: string current_longitude = 2;
     */
    currentLongitude: string; // Current Longitude (°)
    /**
     * @generated from protobuf field: string zodiac_sign = 3;
     */
    zodiacSign: string; // Zodiac Sign
    /**
     * @generated from protobuf field: string degree = 4;
     */
    degree: string; // Degree
    /**
     * @generated from protobuf field: string corresponding_natal_planet = 5;
     */
    correspondingNatalPlanet: string; // Natal Planet
    /**
     * @generated from protobuf field: string aspect_type = 6;
     */
    aspectType: string; // Aspect Type
    /**
     * @generated from protobuf field: string angle = 7;
     */
    angle: string; // Angle (°)
    /**
     * @generated from protobuf field: string influence = 8;
     */
    influence: string; // Influence
}
/**
 * Horoscope Message
 *
 * @generated from protobuf message gateway.Horoscope
 */
export interface Horoscope {
    /**
     * @generated from protobuf field: string day = 1;
     */
    day: string;
    /**
     * @generated from protobuf field: string month = 2;
     */
    month: string;
    /**
     * @generated from protobuf field: string year = 3;
     */
    year: string;
}
/**
 * Enum Definitions (Optional)
 *
 * @generated from protobuf enum gateway.AspectType
 */
export enum AspectType {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Conjunction
     *
     * @generated from protobuf enum value: CONJUNCTION = 1;
     */
    CONJUNCTION = 1,
    /**
     * Opposition
     *
     * @generated from protobuf enum value: OPPOSITION = 2;
     */
    OPPOSITION = 2,
    /**
     * Trine
     *
     * @generated from protobuf enum value: TRINE = 3;
     */
    TRINE = 3,
    /**
     * Square
     *
     * @generated from protobuf enum value: SQUARE = 4;
     */
    SQUARE = 4,
    /**
     * Sextile
     *
     * @generated from protobuf enum value: SEXTILE = 5;
     */
    SEXTILE = 5,
    /**
     * Inconjunction
     *
     * @generated from protobuf enum value: INCONJUNCTION = 6;
     */
    INCONJUNCTION = 6
}
// @generated message type with reflection information, may provide speed optimized methods
class GetHoroscopeAnalysisRequest$Type extends MessageType<GetHoroscopeAnalysisRequest> {
    constructor() {
        super("gateway.GetHoroscopeAnalysisRequest", [
            { no: 1, name: "date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "lon", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<GetHoroscopeAnalysisRequest>): GetHoroscopeAnalysisRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.date = "";
        message.time = "";
        message.lat = 0;
        message.lon = 0;
        if (value !== undefined)
            reflectionMergePartial<GetHoroscopeAnalysisRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetHoroscopeAnalysisRequest): GetHoroscopeAnalysisRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string date */ 1:
                    message.date = reader.string();
                    break;
                case /* string time */ 2:
                    message.time = reader.string();
                    break;
                case /* double lat */ 3:
                    message.lat = reader.double();
                    break;
                case /* double lon */ 4:
                    message.lon = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetHoroscopeAnalysisRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string date = 1; */
        if (message.date !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.date);
        /* string time = 2; */
        if (message.time !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.time);
        /* double lat = 3; */
        if (message.lat !== 0)
            writer.tag(3, WireType.Bit64).double(message.lat);
        /* double lon = 4; */
        if (message.lon !== 0)
            writer.tag(4, WireType.Bit64).double(message.lon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gateway.GetHoroscopeAnalysisRequest
 */
export const GetHoroscopeAnalysisRequest = new GetHoroscopeAnalysisRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetHoroscopeAnalysisResponse$Type extends MessageType<GetHoroscopeAnalysisResponse> {
    constructor() {
        super("gateway.GetHoroscopeAnalysisResponse", [
            { no: 1, name: "analysis", kind: "message", T: () => Analysis },
            { no: 2, name: "data", kind: "message", T: () => HoroscopeData }
        ]);
    }
    create(value?: PartialMessage<GetHoroscopeAnalysisResponse>): GetHoroscopeAnalysisResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetHoroscopeAnalysisResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetHoroscopeAnalysisResponse): GetHoroscopeAnalysisResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* gateway.Analysis analysis */ 1:
                    message.analysis = Analysis.internalBinaryRead(reader, reader.uint32(), options, message.analysis);
                    break;
                case /* gateway.HoroscopeData data */ 2:
                    message.data = HoroscopeData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetHoroscopeAnalysisResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* gateway.Analysis analysis = 1; */
        if (message.analysis)
            Analysis.internalBinaryWrite(message.analysis, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* gateway.HoroscopeData data = 2; */
        if (message.data)
            HoroscopeData.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gateway.GetHoroscopeAnalysisResponse
 */
export const GetHoroscopeAnalysisResponse = new GetHoroscopeAnalysisResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Analysis$Type extends MessageType<Analysis> {
    constructor() {
        super("gateway.Analysis", [
            { no: 1, name: "cusp", kind: "message", T: () => Cusp },
            { no: 2, name: "planet", kind: "message", T: () => PlanetInfo },
            { no: 3, name: "aspect", kind: "message", T: () => AspectInfo },
            { no: 4, name: "transit", kind: "message", T: () => TransitInfo },
            { no: 5, name: "ascendant", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "horoscope", kind: "message", T: () => Horoscope },
            { no: 7, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Analysis>): Analysis {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ascendant = "";
        message.summary = "";
        if (value !== undefined)
            reflectionMergePartial<Analysis>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Analysis): Analysis {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* gateway.Cusp cusp */ 1:
                    message.cusp = Cusp.internalBinaryRead(reader, reader.uint32(), options, message.cusp);
                    break;
                case /* gateway.PlanetInfo planet */ 2:
                    message.planet = PlanetInfo.internalBinaryRead(reader, reader.uint32(), options, message.planet);
                    break;
                case /* gateway.AspectInfo aspect */ 3:
                    message.aspect = AspectInfo.internalBinaryRead(reader, reader.uint32(), options, message.aspect);
                    break;
                case /* gateway.TransitInfo transit */ 4:
                    message.transit = TransitInfo.internalBinaryRead(reader, reader.uint32(), options, message.transit);
                    break;
                case /* string ascendant */ 5:
                    message.ascendant = reader.string();
                    break;
                case /* gateway.Horoscope horoscope */ 6:
                    message.horoscope = Horoscope.internalBinaryRead(reader, reader.uint32(), options, message.horoscope);
                    break;
                case /* string summary */ 7:
                    message.summary = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Analysis, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* gateway.Cusp cusp = 1; */
        if (message.cusp)
            Cusp.internalBinaryWrite(message.cusp, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* gateway.PlanetInfo planet = 2; */
        if (message.planet)
            PlanetInfo.internalBinaryWrite(message.planet, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* gateway.AspectInfo aspect = 3; */
        if (message.aspect)
            AspectInfo.internalBinaryWrite(message.aspect, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* gateway.TransitInfo transit = 4; */
        if (message.transit)
            TransitInfo.internalBinaryWrite(message.transit, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string ascendant = 5; */
        if (message.ascendant !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.ascendant);
        /* gateway.Horoscope horoscope = 6; */
        if (message.horoscope)
            Horoscope.internalBinaryWrite(message.horoscope, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string summary = 7; */
        if (message.summary !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.summary);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gateway.Analysis
 */
export const Analysis = new Analysis$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HoroscopeData$Type extends MessageType<HoroscopeData> {
    constructor() {
        super("gateway.HoroscopeData", [
            { no: 1, name: "planets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Planet },
            { no: 2, name: "current_planets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Planet },
            { no: 3, name: "houses", kind: "message", T: () => Houses },
            { no: 4, name: "current_houses", kind: "message", T: () => Houses },
            { no: 5, name: "signs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Sign }
        ]);
    }
    create(value?: PartialMessage<HoroscopeData>): HoroscopeData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.planets = [];
        message.currentPlanets = [];
        message.signs = [];
        if (value !== undefined)
            reflectionMergePartial<HoroscopeData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HoroscopeData): HoroscopeData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated gateway.Planet planets */ 1:
                    message.planets.push(Planet.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated gateway.Planet current_planets */ 2:
                    message.currentPlanets.push(Planet.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* gateway.Houses houses */ 3:
                    message.houses = Houses.internalBinaryRead(reader, reader.uint32(), options, message.houses);
                    break;
                case /* gateway.Houses current_houses */ 4:
                    message.currentHouses = Houses.internalBinaryRead(reader, reader.uint32(), options, message.currentHouses);
                    break;
                case /* repeated gateway.Sign signs */ 5:
                    message.signs.push(Sign.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HoroscopeData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated gateway.Planet planets = 1; */
        for (let i = 0; i < message.planets.length; i++)
            Planet.internalBinaryWrite(message.planets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated gateway.Planet current_planets = 2; */
        for (let i = 0; i < message.currentPlanets.length; i++)
            Planet.internalBinaryWrite(message.currentPlanets[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* gateway.Houses houses = 3; */
        if (message.houses)
            Houses.internalBinaryWrite(message.houses, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* gateway.Houses current_houses = 4; */
        if (message.currentHouses)
            Houses.internalBinaryWrite(message.currentHouses, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated gateway.Sign signs = 5; */
        for (let i = 0; i < message.signs.length; i++)
            Sign.internalBinaryWrite(message.signs[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gateway.HoroscopeData
 */
export const HoroscopeData = new HoroscopeData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Planet$Type extends MessageType<Planet> {
    constructor() {
        super("gateway.Planet", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "longitude", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Planet>): Planet {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.longitude = "";
        if (value !== undefined)
            reflectionMergePartial<Planet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Planet): Planet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string longitude */ 2:
                    message.longitude = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Planet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string longitude = 2; */
        if (message.longitude !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.longitude);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gateway.Planet
 */
export const Planet = new Planet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Houses$Type extends MessageType<Houses> {
    constructor() {
        super("gateway.Houses", [
            { no: 1, name: "house", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "ascendant", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "mc", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "armc", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "vertex", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "equatorial_ascendant", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "koch_co_ascendant", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "munkasey_co_ascendant", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "munkasey_polar_ascendant", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<Houses>): Houses {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.house = [];
        message.ascendant = 0;
        message.mc = 0;
        message.armc = 0;
        message.vertex = 0;
        message.equatorialAscendant = 0;
        message.kochCoAscendant = 0;
        message.munkaseyCoAscendant = 0;
        message.munkaseyPolarAscendant = 0;
        if (value !== undefined)
            reflectionMergePartial<Houses>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Houses): Houses {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 house */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.house.push(reader.int32());
                    else
                        message.house.push(reader.int32());
                    break;
                case /* double ascendant */ 2:
                    message.ascendant = reader.double();
                    break;
                case /* double mc */ 3:
                    message.mc = reader.double();
                    break;
                case /* double armc */ 4:
                    message.armc = reader.double();
                    break;
                case /* double vertex */ 5:
                    message.vertex = reader.double();
                    break;
                case /* double equatorial_ascendant */ 6:
                    message.equatorialAscendant = reader.double();
                    break;
                case /* double koch_co_ascendant */ 7:
                    message.kochCoAscendant = reader.double();
                    break;
                case /* double munkasey_co_ascendant */ 8:
                    message.munkaseyCoAscendant = reader.double();
                    break;
                case /* double munkasey_polar_ascendant */ 9:
                    message.munkaseyPolarAscendant = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Houses, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 house = 1; */
        if (message.house.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.house.length; i++)
                writer.int32(message.house[i]);
            writer.join();
        }
        /* double ascendant = 2; */
        if (message.ascendant !== 0)
            writer.tag(2, WireType.Bit64).double(message.ascendant);
        /* double mc = 3; */
        if (message.mc !== 0)
            writer.tag(3, WireType.Bit64).double(message.mc);
        /* double armc = 4; */
        if (message.armc !== 0)
            writer.tag(4, WireType.Bit64).double(message.armc);
        /* double vertex = 5; */
        if (message.vertex !== 0)
            writer.tag(5, WireType.Bit64).double(message.vertex);
        /* double equatorial_ascendant = 6; */
        if (message.equatorialAscendant !== 0)
            writer.tag(6, WireType.Bit64).double(message.equatorialAscendant);
        /* double koch_co_ascendant = 7; */
        if (message.kochCoAscendant !== 0)
            writer.tag(7, WireType.Bit64).double(message.kochCoAscendant);
        /* double munkasey_co_ascendant = 8; */
        if (message.munkaseyCoAscendant !== 0)
            writer.tag(8, WireType.Bit64).double(message.munkaseyCoAscendant);
        /* double munkasey_polar_ascendant = 9; */
        if (message.munkaseyPolarAscendant !== 0)
            writer.tag(9, WireType.Bit64).double(message.munkaseyPolarAscendant);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gateway.Houses
 */
export const Houses = new Houses$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Sign$Type extends MessageType<Sign> {
    constructor() {
        super("gateway.Sign", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sign", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "house", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Sign>): Sign {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.sign = "";
        message.house = 0;
        if (value !== undefined)
            reflectionMergePartial<Sign>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Sign): Sign {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string sign */ 2:
                    message.sign = reader.string();
                    break;
                case /* int32 house */ 3:
                    message.house = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Sign, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string sign = 2; */
        if (message.sign !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sign);
        /* int32 house = 3; */
        if (message.house !== 0)
            writer.tag(3, WireType.Varint).int32(message.house);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gateway.Sign
 */
export const Sign = new Sign$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cusp$Type extends MessageType<Cusp> {
    constructor() {
        super("gateway.Cusp", [
            { no: 1, name: "headers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CuspData },
            { no: 3, name: "analysis", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Cusp>): Cusp {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.headers = [];
        message.data = [];
        message.analysis = [];
        if (value !== undefined)
            reflectionMergePartial<Cusp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cusp): Cusp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string headers */ 1:
                    message.headers.push(reader.string());
                    break;
                case /* repeated gateway.CuspData data */ 2:
                    message.data.push(CuspData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string analysis */ 3:
                    message.analysis.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Cusp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string headers = 1; */
        for (let i = 0; i < message.headers.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.headers[i]);
        /* repeated gateway.CuspData data = 2; */
        for (let i = 0; i < message.data.length; i++)
            CuspData.internalBinaryWrite(message.data[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated string analysis = 3; */
        for (let i = 0; i < message.analysis.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.analysis[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gateway.Cusp
 */
export const Cusp = new Cusp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CuspData$Type extends MessageType<CuspData> {
    constructor() {
        super("gateway.CuspData", [
            { no: 1, name: "house", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_longitude", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "zodiac_sign", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "degrees", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CuspData>): CuspData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.house = "";
        message.startLongitude = "";
        message.zodiacSign = "";
        message.degrees = "";
        if (value !== undefined)
            reflectionMergePartial<CuspData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CuspData): CuspData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string house */ 1:
                    message.house = reader.string();
                    break;
                case /* string start_longitude */ 2:
                    message.startLongitude = reader.string();
                    break;
                case /* string zodiac_sign */ 3:
                    message.zodiacSign = reader.string();
                    break;
                case /* string degrees */ 4:
                    message.degrees = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CuspData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string house = 1; */
        if (message.house !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.house);
        /* string start_longitude = 2; */
        if (message.startLongitude !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.startLongitude);
        /* string zodiac_sign = 3; */
        if (message.zodiacSign !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.zodiacSign);
        /* string degrees = 4; */
        if (message.degrees !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.degrees);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gateway.CuspData
 */
export const CuspData = new CuspData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlanetInfo$Type extends MessageType<PlanetInfo> {
    constructor() {
        super("gateway.PlanetInfo", [
            { no: 1, name: "headers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlanetData },
            { no: 3, name: "analysis", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlanetInfo>): PlanetInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.headers = [];
        message.data = [];
        message.analysis = [];
        if (value !== undefined)
            reflectionMergePartial<PlanetInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlanetInfo): PlanetInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string headers */ 1:
                    message.headers.push(reader.string());
                    break;
                case /* repeated gateway.PlanetData data */ 2:
                    message.data.push(PlanetData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string analysis */ 3:
                    message.analysis.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlanetInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string headers = 1; */
        for (let i = 0; i < message.headers.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.headers[i]);
        /* repeated gateway.PlanetData data = 2; */
        for (let i = 0; i < message.data.length; i++)
            PlanetData.internalBinaryWrite(message.data[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated string analysis = 3; */
        for (let i = 0; i < message.analysis.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.analysis[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gateway.PlanetInfo
 */
export const PlanetInfo = new PlanetInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlanetData$Type extends MessageType<PlanetData> {
    constructor() {
        super("gateway.PlanetData", [
            { no: 1, name: "planet", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "longitude", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "zodiac_sign", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "degrees", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "house", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlanetData>): PlanetData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.planet = "";
        message.longitude = "";
        message.zodiacSign = "";
        message.degrees = "";
        message.house = "";
        if (value !== undefined)
            reflectionMergePartial<PlanetData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlanetData): PlanetData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string planet */ 1:
                    message.planet = reader.string();
                    break;
                case /* string longitude */ 2:
                    message.longitude = reader.string();
                    break;
                case /* string zodiac_sign */ 3:
                    message.zodiacSign = reader.string();
                    break;
                case /* string degrees */ 4:
                    message.degrees = reader.string();
                    break;
                case /* string house */ 5:
                    message.house = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlanetData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string planet = 1; */
        if (message.planet !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.planet);
        /* string longitude = 2; */
        if (message.longitude !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.longitude);
        /* string zodiac_sign = 3; */
        if (message.zodiacSign !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.zodiacSign);
        /* string degrees = 4; */
        if (message.degrees !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.degrees);
        /* string house = 5; */
        if (message.house !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.house);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gateway.PlanetData
 */
export const PlanetData = new PlanetData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AspectInfo$Type extends MessageType<AspectInfo> {
    constructor() {
        super("gateway.AspectInfo", [
            { no: 1, name: "headers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AspectData },
            { no: 3, name: "analysis", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AspectInfo>): AspectInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.headers = [];
        message.data = [];
        message.analysis = [];
        if (value !== undefined)
            reflectionMergePartial<AspectInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AspectInfo): AspectInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string headers */ 1:
                    message.headers.push(reader.string());
                    break;
                case /* repeated gateway.AspectData data */ 2:
                    message.data.push(AspectData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string analysis */ 3:
                    message.analysis.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AspectInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string headers = 1; */
        for (let i = 0; i < message.headers.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.headers[i]);
        /* repeated gateway.AspectData data = 2; */
        for (let i = 0; i < message.data.length; i++)
            AspectData.internalBinaryWrite(message.data[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated string analysis = 3; */
        for (let i = 0; i < message.analysis.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.analysis[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gateway.AspectInfo
 */
export const AspectInfo = new AspectInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AspectData$Type extends MessageType<AspectData> {
    constructor() {
        super("gateway.AspectData", [
            { no: 1, name: "planet1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "planet2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "aspect", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "angle", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AspectData>): AspectData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.planet1 = "";
        message.planet2 = "";
        message.aspect = "";
        message.angle = "";
        if (value !== undefined)
            reflectionMergePartial<AspectData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AspectData): AspectData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string planet1 */ 1:
                    message.planet1 = reader.string();
                    break;
                case /* string planet2 */ 2:
                    message.planet2 = reader.string();
                    break;
                case /* string aspect */ 3:
                    message.aspect = reader.string();
                    break;
                case /* string angle */ 4:
                    message.angle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AspectData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string planet1 = 1; */
        if (message.planet1 !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.planet1);
        /* string planet2 = 2; */
        if (message.planet2 !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.planet2);
        /* string aspect = 3; */
        if (message.aspect !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.aspect);
        /* string angle = 4; */
        if (message.angle !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.angle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gateway.AspectData
 */
export const AspectData = new AspectData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransitInfo$Type extends MessageType<TransitInfo> {
    constructor() {
        super("gateway.TransitInfo", [
            { no: 1, name: "headers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TransitData },
            { no: 3, name: "analysis", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TransitInfo>): TransitInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.headers = [];
        message.data = [];
        message.analysis = [];
        if (value !== undefined)
            reflectionMergePartial<TransitInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransitInfo): TransitInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string headers */ 1:
                    message.headers.push(reader.string());
                    break;
                case /* repeated gateway.TransitData data */ 2:
                    message.data.push(TransitData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string analysis */ 3:
                    message.analysis.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransitInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string headers = 1; */
        for (let i = 0; i < message.headers.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.headers[i]);
        /* repeated gateway.TransitData data = 2; */
        for (let i = 0; i < message.data.length; i++)
            TransitData.internalBinaryWrite(message.data[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated string analysis = 3; */
        for (let i = 0; i < message.analysis.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.analysis[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gateway.TransitInfo
 */
export const TransitInfo = new TransitInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransitData$Type extends MessageType<TransitData> {
    constructor() {
        super("gateway.TransitData", [
            { no: 1, name: "planet", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "current_longitude", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "zodiac_sign", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "degree", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "corresponding_natal_planet", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "aspect_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "angle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "influence", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TransitData>): TransitData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.planet = "";
        message.currentLongitude = "";
        message.zodiacSign = "";
        message.degree = "";
        message.correspondingNatalPlanet = "";
        message.aspectType = "";
        message.angle = "";
        message.influence = "";
        if (value !== undefined)
            reflectionMergePartial<TransitData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransitData): TransitData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string planet */ 1:
                    message.planet = reader.string();
                    break;
                case /* string current_longitude */ 2:
                    message.currentLongitude = reader.string();
                    break;
                case /* string zodiac_sign */ 3:
                    message.zodiacSign = reader.string();
                    break;
                case /* string degree */ 4:
                    message.degree = reader.string();
                    break;
                case /* string corresponding_natal_planet */ 5:
                    message.correspondingNatalPlanet = reader.string();
                    break;
                case /* string aspect_type */ 6:
                    message.aspectType = reader.string();
                    break;
                case /* string angle */ 7:
                    message.angle = reader.string();
                    break;
                case /* string influence */ 8:
                    message.influence = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransitData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string planet = 1; */
        if (message.planet !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.planet);
        /* string current_longitude = 2; */
        if (message.currentLongitude !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.currentLongitude);
        /* string zodiac_sign = 3; */
        if (message.zodiacSign !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.zodiacSign);
        /* string degree = 4; */
        if (message.degree !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.degree);
        /* string corresponding_natal_planet = 5; */
        if (message.correspondingNatalPlanet !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.correspondingNatalPlanet);
        /* string aspect_type = 6; */
        if (message.aspectType !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.aspectType);
        /* string angle = 7; */
        if (message.angle !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.angle);
        /* string influence = 8; */
        if (message.influence !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.influence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gateway.TransitData
 */
export const TransitData = new TransitData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Horoscope$Type extends MessageType<Horoscope> {
    constructor() {
        super("gateway.Horoscope", [
            { no: 1, name: "day", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "month", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "year", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Horoscope>): Horoscope {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.day = "";
        message.month = "";
        message.year = "";
        if (value !== undefined)
            reflectionMergePartial<Horoscope>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Horoscope): Horoscope {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string day */ 1:
                    message.day = reader.string();
                    break;
                case /* string month */ 2:
                    message.month = reader.string();
                    break;
                case /* string year */ 3:
                    message.year = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Horoscope, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string day = 1; */
        if (message.day !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.day);
        /* string month = 2; */
        if (message.month !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.month);
        /* string year = 3; */
        if (message.year !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.year);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gateway.Horoscope
 */
export const Horoscope = new Horoscope$Type();
/**
 * @generated ServiceType for protobuf service gateway.GatewayService
 */
export const GatewayService = new ServiceType("gateway.GatewayService", [
    { name: "GetHoroscopeAnalysis", options: {}, I: GetHoroscopeAnalysisRequest, O: GetHoroscopeAnalysisResponse }
]);
